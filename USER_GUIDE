This is a USER GUIDE for the programm.

Create a Gaussian basis file in MSL_Basis_Set_Exchange_Local/data/ : 
	generateFile:: [Char] -> [Char] -> [Char] -> IO ()
	generateFile <basis> -> <atmname> ->  <filename> => IO ()

	<basis>	- basis type. 	For a detailed list, run ./EMSL_api.py list_basis in the EMSL_Basis_Set_Exchange_Local/ directory.
	<atmname> - Atomname. NOTE: Not for every basis type and Atomname a basis set exists. 
					For a list of possible Atoms for a given basis type, run ./EMSL_api.py list_atoms --basis=<basistype>
	<filename> - Filename. Will be saved in EMSL_Basis_Set_Exchange_Local/data/

	EXAMPLE: generateFile "STO-3G" "C" "C_STO_3G.dat"



Get Basis Data for a given File:
	getAtomData :: [Char] -> Atom
	getAtomData <filename> => Atom

	<filename> - Filename. Will be loaded from EMSL_Basis_Set_Exchange_Local/data/
	
	EXAMPLE: getAtomData "C_STO_3G.dat"



Create Molecule:
	--data type Mol: Contains all necessary information about a Molecule	
	data Mol = Mol {  molname :: String		--molecule name , eg "H20" etc.
			, config :: [(Atom , Vector Double)] --configuration
			} deriving (Show)
	EXAMPLE: let a = Mol "SINGLE-Carbon" [(getAtomData "C_STO_3G.dat", fromList [1,0,0])]



Get Molecule information:
Good to check if everything is right with the Molecule.
	molinfo :: Mol -> IO ()
	molinfo <mol> => IO ()

	<mol> Molecule Datatype

	EXAMPLE: let a = Mol "SINGLE-Carbon" [(getAtomData "C_STO_3G.dat", fromList [1,0,0])]
		 molinfo a



Construct a Molecule from a given File, containing the geometry of the system:
The file should have the cartesian XYZ-file format that is used in Molden. This makes it easy to design a geometric structure with preguessed bond lengths and dihedral angles, etc.

		Reads the file and gives a list of Atomstrings, e.g. "C" with corresponding positions:
	getgeom [Char] -> [([Char], Vector Double)]
	getgeom <filename> => [(<Atomstring>, <Positions>)]
		
		For a list of Atomstrings with corresponding positions and a given basis set, e.g. "STO-6G", save basis set data to multiple files. 
		IMPORTANT: The files are saved in the format <basis>_<Atomstring>.dat
	constr_set_from_file :: [([Char], b)] -> [Char] -> IO ()
	constr_set_from_file [(<Atomstring>, <Positions>)] -> <basis> -> IO ()
		
		For a list of Atomstrings with corresponding positions a given basis set and a molecule name, construct a Molecule. NOTE the difference between this function and constr_set_from_file !
	constr_set_from_file :: [([Char], Vector Double)] -> [Char] -> [Char] -> Mol
	constr_set_from_file [(<Atomstring>, <Positions>)] -> <basis> -> <molstring> => Mol


	EXAMPLE: Suppose you have a file "CO2.xyz" containing the cartesian geometric information.
	1. Read the geometry information:
			let list = getgeom "CO2.xyz"
	2. Construct the basis set data for the different molecules:
			constr_set_from_file list "STO-6G"
	3. Read the data to construct the complete molecule:
			let mol = get_mol_from_files list "STO-6G" "CO2"


Show/Save geometric structure of the molecule:
	
	Save geometric data of a molecule to a file: 
		molsafe :: Mol -> String -> IO ()
		molsafe <molname> -> <filename> => IO ()
	
	Show only geometric information:
		showgeom :: Mol -> IO ()
		showgeom <molname> => IO ()


Datatype conversion:
Convert a Mol-type to a list of Contractins ([Ctr]-type)
mol_to_gaussians :: Mol -> [Ctr]

	























